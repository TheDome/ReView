on:
  pull_request_target:
  push:
    branches:
      - main
      - develop


name: Test, Check and Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo-audit@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install gtk-dev
        run: sudo apt-get install build-essential libgtk-3-dev
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: check
  test:
    runs-on: ubuntu-latest
    needs:
      - check
      - audit
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: test
  build:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
  semantic-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: "14"
      - shell: bash
        run: |
          sudo npm install -g \
            semantic-release@18.0.0 \
            @semantic-release/git@10.0.0 \
            @semantic-release/release-notes-generator@10.0.2 \
            @semantic-release/github@8.0.0 \
            @semantic-release/changelog@6.0.0
      - shell: bash
        run: |
          semantic-release \
            --branches main \
            --plugins "@semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/changelog,@semantic-release/git,@semantic-release/github" \
            --tag-format \${version} \
            --debug true
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6 # Not needed with a .ruby-version file
          bundler-cache: true
      - name: Create Release PR
        shell: bash
        run: |
          cat <<EOF > .releaserc.yaml
          branches: ["${GITHUB_REF#refs/*/}"]
          tagFormat: '\${version}'
          dryRun: true
          ci: true
          debug: true
          plugins:
            - '@semantic-release/commit-analyzer'
            - [
                '@semantic-release/exec',
                {
                  'verifyReleaseCmd': "echo \${nextRelease.version} > version.txt",
                },
              ]
          EOF
          npx semantic-release --debug
          cat <<EOF > template.erb
          Release $(cat version.txt)
          <% pull_requests.each do |pr| -%>
          <%=  pr.to_checklist_item %>
          <% end -%>
          EOF
          if [ $GITHUB_EVENT_NAME = "push" ] && [ ${GITHUB_REF#refs/*/} = "${{ github.event.repository.default_branch }}" ] && [ ! "${{ github.event.repository.default_branch }}" = "main" ]; then
            gem install --no-document git-pr-release
            git-pr-release --no-fetch --squashed
          fi
        env:
          GIT_PR_RELEASE_BRANCH_PRODUCTION: main
          GIT_PR_RELEASE_BRANCH_STAGING: ${{ github.event.repository.default_branch }}
          GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_PR_RELEASE_LABELS: release
          GIT_PR_RELEASE_MENTION: author
          GIT_PR_RELEASE_TEMPLATE: template.erb
          DEBUG: "true"
